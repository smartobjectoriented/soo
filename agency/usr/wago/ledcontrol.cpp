#include <rapidjson/document.h>
#include <iostream>
#include <stdexcept>
#include <algorithm>  
#include "ledcontrol.h"

namespace LED
{
    Ledctrl::Ledctrl() : client(BASE_ADDR, PORT) {}

    Ledctrl::~Ledctrl()
    {
        for(auto& elem : leds)
        {
            delete elem;
        }
    }

    void Ledctrl::init()
    {
        std::string topology;
        rapidjson::Document doc;

        if (client.GET(GET_TOPOLOGY, topology) < 0) 
        {
            throw std::runtime_error("Failed to get dali topology");
        }

        doc.Parse(topology.c_str());

        assert(doc.IsObject());

        auto top = doc[DATA_OBJ].GetObject();
        auto devices = top[DEVICE_ARR].GetArray();

        for (rapidjson::Value::ConstValueIterator it = devices.Begin(); it != devices.End(); ++it)
        {
            assert(it->IsObject());
            assert(it->HasMember(DEVICE_TYPE));

            if (strcmp((*it)[DEVICE_TYPE].GetString(), DEVICE_LED) == 0)
            {
                led_t *l = new led_t;
                l->id = (*it)[LED_ID].GetInt();
                
                assert((*it)[LED_STATUS].IsArray());

                auto stat_array = (*it)[LED_STATUS].GetArray();

                //TODO change array generated by topology on wago device
                l->status = stat_array[1].GetInt();

                leds.push_back(l);
            }
        }

        // for (auto& elem : leds)
        // {
        //     std::cout << "Led [" << elem->id << "] value : " << elem->status << std::endl;
    }

    void Ledctrl::build_args_str(std::string& args, std::vector<int> ids)
    {
        args = ARGS;

        std::sort(ids.begin(), ids.end(), [](int i, int j) { return i < j; });

        for (auto& elem : ids)
        {
            if (elem < leds.size() + 1) 
            {
                args += std::to_string(elem) + ",";
            } 
            else
            {
                std::cout << "Error : id " << elem << " do not exists" << std::endl;
            }
        }
    }

    int Ledctrl::turn_on(std::vector<int> ids)
    {
        std::string args;
        build_args_str(args, ids);

        if (client.POST(POST_LED_ON, args) < 0) 
        {
            std::cout << "Failed to POST led on" << std::endl;
            return -1;
        }

        return 0;
    }

    int Ledctrl::turn_off(std::vector<int> ids)
    {
        std::string args;
        build_args_str(args, ids);

        if (client.POST(POST_LED_OFF, args) < 0) 
        {
            std::cout << "Failed to POST led off" << std::endl;
            return -1;
        }

        return 0;
    }

    int Ledctrl::turn_all_on()
    {
        if (client.POST(POST_LED_ON, ARGS LED_ALL) < 0) 
        {
            std::cout << "Failed to POST led on" << std::endl;
            return -1;
        }

        return 0;
    }

    int Ledctrl::turn_all_off()
    {
        if (client.POST(POST_LED_OFF, ARGS LED_ALL) < 0) 
        {
            std::cout << "Failed to POST led off" << std::endl;
            return -1;
        }

        return 0;
    }

    void Ledctrl::update_status()
    {
        std::string resp;

        if (client.GET(GET_STATUS, resp, ARGS LED_ALL) < 0) {
            std::cout << "Failed to read status" << std::endl;
        } else {
            std::cout << "get status :\n" << resp << std::endl;
        }
    }

} //end LED